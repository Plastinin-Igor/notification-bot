package ru.plastinin.notification_bot.bot;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.plastinin.notification_bot.service.ServiceNotificationBot;

@Component
@Slf4j
public class NotificationTelegramBot extends TelegramLongPollingBot {

    @Value("${bot.username}")
    private String botUsername;

    @Autowired
    private ServiceNotificationBot service;

    private static final String START = "/start";
    private static final String HELP = "/help";
    private static final String DEBUG = "/debug";

    public NotificationTelegramBot(@Value("${bot.token}") String botToken) {
        super(botToken);
    }

    @Override
    public void onUpdateReceived(Update update) {

        Long chatId = update.getMessage().getChatId();
        String message = update.getMessage().getText();
        Message msg = update.getMessage();
        String name = update.getMessage().getChat().getUserName();
        String firstName = update.getMessage().getChat().getTitle();
        String userName = name != null ? name : firstName;

        // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        // –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã
        if (service.getUserById(chatId).isEmpty()) {
            log.info("Access denied for user: {} with, chatId: {}.", userName, chatId);
            sendMessage(chatId, "Access denied");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if (!update.hasMessage() || !msg.hasText()) {
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        switch (message) {
            case START -> {
                startCommand(chatId, userName);
                log.info("START from username: {}, chatId: {}.", userName, chatId);
            }
            case HELP -> {
                helpCommand(chatId, userName);
                log.info("HELP from username: {}, chatId: {}.", userName, chatId);
            }
            case DEBUG -> {

                sendMessage(chatId, service.getAllUsers());
                sendMessage(chatId, service.getAllEvents());
                sendMessage(chatId, service.getAllBirthdays());

                log.info("DEBUG from username: {}, chatId: {}.", userName, chatId);
            }
            default -> {
                sendMessage(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
                log.info("The command is not supported. Username: {}, chatId: {}.", userName, chatId);
            }
        }

    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }


    public void sendMessage(Long chatId, String text) {
        var chatIdStr = String.valueOf(chatId);
        var sendMessage = new SendMessage(chatIdStr, text);
        sendMessage.setParseMode("HTML");
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("Error sending message", e);
        }
    }


    private void startCommand(Long chatId, String userName) {
        String text = """
                %s, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!
                
                –Ø —É–º–µ—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –≥—Ä—É–ø–ø—É –∑–∞—Ä–∞–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
                
                –ù–∞–ø—Ä–∏–º–µ—Ä:
                 - –°–µ–≥–æ–¥–Ω—è –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –±–∞–±—É—à–∫–∏ ü•≥
                 - –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è —É—Ä–æ–∫ üéì
                 - –ü–æ—Ä–∞ —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è ‚úèÔ∏èüìê
                 - –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã üíä
                
                
               
                –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã üöÄ /start
                –°–ø—Ä–∞–≤–∫–∞ üîç /help
                """;
        String formatedText = String.format(text, userName);
        sendMessage(chatId, formatedText);
    }

    private void helpCommand(Long chatId, String userName) {
        String text = """
                –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
                
                
                
                –ö–æ–º–∞–Ω–¥—ã:
                
                - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã üöÄ /start
                
                - –°–ø—Ä–∞–≤–∫–∞ üîç /help
                
                - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üìù /list
                
                - –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üîî /event
                
                - –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π üóì /day
                
                """;
        sendMessage(chatId, text);
    }

}
